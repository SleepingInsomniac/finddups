#!/usr/bin/env ruby

require 'digest/sha1'
require 'json'
require 'yaml'
require 'fileutils'
require 'optparse'

$LOAD_PATH.unshift(File.join(__dir__, '..', 'lib'))

require 'finddups'
require 'dup_finder'

options = {}

optparser = OptionParser.new do |opts|
  opts.banner = <<~BANNER
    finddups #{Finddups::VERSION}
    Usage: #{File.basename(__FILE__)} [dirs] [options]
  BANNER

  opts.on("-i path", "--ignore path", "ignore paths") do |path|
    options[:ignore] ||= []
    options[:ignore] << path
  end

  opts.on("-d depth", "--depth depth", "Max depth to search") do |depth|
    options[:depth] = depth.to_i
  end

  opts.on("--[no-]cache", "Perform caching") do |value|
    options[:cache] = value
  end

  opts.on("--[no-]cache-to-tmp", "Save cache files to /tmp/file_hashes") do |value|
    options[:cache_to_tmp] = value
  end

  opts.on("-o path", "--output path", "Output file path") do |path|
    options[:output] = path
  end

  opts.on("--alg alg", "Hashing algorithm (SHA1, MD5)") do |alg|
    options[:alg] = alg.downcase.to_sym
    unless %i[md5 sha1].include?(options[:alg])
      $stderr.puts "Unsupported algorithm: #{options[:alg]}"
      exit 1
    end
  end

  opts.on("--[no-]ignore-empty", "Ignore empty files") do |value|
    options[:ignore_empty] = value
  end

  opts.on("-h", "--help", "Show this help") do
    puts opts
    exit
  end

  opts.on("-v", "--version", "Show version") do
    puts "finddups #{Finddups::VERSION}"
    exit
  end
end

optparser.parse!

if ARGV.empty? || ARGV.any? { |entry| !File.directory?(entry) }
  $stderr.puts "Every argument must be a directory"
  exit 1
end

# Prog ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

dup_finder = DupFinder.new(options: options)
ARGV.each { |path| dup_finder.queue(path) }
dup_finder.search

if options[:output]
  File.open(options[:output], 'w') do |file|
    file.write(JSON.pretty_generate(dup_finder.duplicate_entries))
  end
else
  $stdout.puts JSON.pretty_generate(dup_finder.duplicate_entries)
end
